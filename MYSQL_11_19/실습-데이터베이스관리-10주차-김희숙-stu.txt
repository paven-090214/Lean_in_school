-- 데이터베이스관리(담당: 김희숙) 10주차 실습(stu)

-- (MySQL) safe mode 해제
SET SQL_SAFE_UPDATES = 0;

-- 테이블 구조 확인
DESC 테이블명;
==============================
----------------------------------------
-- SAFE_UPDATE 모드 해제
SET SQL_SAFE_UPDATES = 0;

-- 테이블 구조 확인
DESC 테이블명;
-----------------------------------------

/*------- 제약조건 확인(MySQL) ------ */
-- (MySQL) 제약조건 확인

-- 제약조건(부서, 사원)
SELECT * 
FROM  information_schema.table_constraints
WHERE table_name IN ('부서','사원');
/* -------------------------------------- */
==============================
10주차 (실습)
==============================
# (MySQL)
1단계: 데이터베이스 생성  studydb
    사용할 데이터베이스 선택
USE studydb;

2단계: 테이블 생성           성적, 성적2,  사원
                                    [Quiz 1] fruit
                                    [Quiz 2] 고객
                                    [과제 02] (고객,제품,주문)

3단계: 데이터 입력

4단계: 데이터 조회
select * from 성적;
-----------------------------------------
# [요약] 집계함수 (sungjuk_group.sql)

-- 집계함수 : 여러 개 행의 값들을 계산하여 하나의 결과를 산출하는 함수
(aggregate function)

-- COUNT(*)    : NULL 포함하여 계산
-- COUNT(필드) : NULL 제외하여 계산

-- Group by(그룹화): 테이블로 부터 어떤 열을 기준해서
                   그룹으로 묶어 
                   합계 계산하거나 평균산출하여 검색
-----------------------------------------
# [요약]  /* SELECT 문법 순서 */
SELECT
FROM
WHERE
GROUP  BY
HAVING
ORDER  BY
-----------------------------------------
[실습] SELECT (집계함수)
-- 성적(이름, 점수)
-- 성적2(이름, 과목, 점수)

/* -------- 집계함수, 그룹화 -------------------- */
drop table 성적;
drop table 성적2;

-- 집계함수
CREATE TABLE 성적(
     이름 varchar(9) NOT NULL primary key, 
     점수 int 
);

INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '홍길동', 87 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '임꺽정', 60 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '박찬호', 75 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '선동열', 70 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '홍명보', 90 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '차범근', 75 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '강성범', 68 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '신동엽', null);

-- 그룹화
-- GROUP BY, HAVING

CREATE TABLE 성적2 (
    이름 varchar(9) NOT NULL primary key , 
    과목 varchar(8), 
    점수 int
);

INSERT INTO 성적2 VALUES ('홍길동', '영어',87 );
INSERT INTO 성적2 VALUES ('임꺽정', '수학',60 );
INSERT INTO 성적2 VALUES ('박찬호', '국어',75 );
INSERT INTO 성적2 VALUES ('선동열', '영어',70 );
INSERT INTO 성적2 VALUES ('홍명보', '수학',90 );
INSERT INTO 성적2 VALUES ('차범근', '수학',75 );
INSERT INTO 성적2 VALUES ('강성범', '수학',68 );
INSERT INTO 성적2 VALUES ('신동엽', '영어',null);

SELECT * FROM 성적;
SELECT * FROM 성적2;

/* ------------------------------------------ */
[실습 1-01] SELECT (집계함수)

-- 성적(이름, 점수)
-- 1-1) 최고 점수를 검색하라 
-- 1-2) 최저 점수를 검색하라
-- 1-3) 점수합계를 검색하라 
-- 1-4) 평균점수를 검색하라
-- 1-5) 학생수는 모두 몇 명인지 검색하라
-- 1-6) 시험에 응시한 학생수는 모두 몇 명인지 검색하라
-----------------------------------------
[실습 1-02] SELECT (그룹화)

-- 성적2(이름, 과목, 점수)
-- 2-1) 각 과목수는 몇 개인지 검색하라(DISTINCT 사용)
-- 2-2) 과목별 수강생은 몇 명인지 검색하라(GROUP BY)
-- 2-3) 과목별 평균점수를 검색하라(GROUP BY)
-- 2-4) 과목별 평균점수 75 보다 높은 학생의 과목별 평균점수를 검색하라(HAVING)

-- ROUND() 함수

select 과목, ROUND(AVG(점수))
from 성적2
group by 과목;

--2-5) 점수가 70 이상인 과목이름, 과목 평균점수를 과목의 과목별 평균점수가 75 이상인 것만
--과목별 평균점수가 높은 순으로 검색하라(ORDER  BY)
-----------------------------------------
-- [Quiz 1]  (MySQL) 실습: (fruit)

--  1. 다음과 같은 fruit 테이블을 생성하고 적절한 SQL문법을 작성하시오

-- 1-1) 다음 테이블을 생성하시오
(테이블명: fruit)
(기본키: 과일번호): 데이터형식 int
(auto_increment 설정)

-- 1-2) 데이터 입력하시오

fruit 
과일번호 과일이름   가격   색상   원산지
1        사과       2000    빨간색  한국
2        배          5000    노란색  한국
3        바나나    1500    노란색  인도네시아
4        키위       4000    초록색  호주
5        수박       8000    초록색  한국

-- 2-1) 노란색 과일의 이름, 색상을 검색하라.
-- 2-2) 과일이름을 오름차순으로 정렬하여 모든 필드를 검색하라
-- 2-3) 가격이 5000 이하인 빨간색 과일의 이름을 검색하라
-- 2-4) 가격이 2000 ~ 5000 사이의 과일이름과 가격, 원산지를 검색하라(BETWEEN AND)
-- 2-5) 색상이 노란색이거나 초록색인 과일이름, 색상을 검색하라(IN 사용)
-- 2-6) 색상이 노란색이거나 초록색인 과일이름, 색상을 검색하라(논리연산자 OR 사용)
-- 2-7) 원산지가 한국이 아닌 과일이름, 원산지를 검색하라


/*--------------fruit 스키마 (자동생성 있는 경우)--------*/
-- (MySQL)

drop table if exists fruit;

create table fruit (
    과일번호     int      NOT NULL AUTO_INCREMENT  ,
    과일이름     varchar(30) ,
    가격           int,
    색상           varchar(20) ,
    원산지        varchar(30) , 
    PRIMARY KEY(과일번호)
);

insert into fruit(과일이름,가격,색상,원산지) values('사과',2000,'빨간색','한국');
insert into fruit(과일이름,가격,색상,원산지)  values('배',5000,'노란색','한국');
insert into fruit(과일이름,가격,색상,원산지)  values('바나나',1500,'노란색','인도네시아');
insert into fruit(과일이름,가격,색상,원산지)  values('키위',4000,'초록색','호주');
insert into fruit(과일이름,가격,색상,원산지)  values('수박',8000,'초록색','한국');

select * from fruit;
/*------------------------------------------------------*/

-----------------------------------------
-- [Quiz 2]  (MySQL) 실습: (고객)

-- 다음 조건을 만족하는 테이블을 생성하시오

-- 고객 테이블은 고객아이디, 고객이름, 나이, 등급, 직업, 적립금 속성으로
-- 구성되고, 고객아이디 속성이 기본키다.
-- 고객이름과 등급 속성은 값을 반드시 입력해야 하고,
-- 적립금 속성은 값을 입력하지 않으면 0이 기본으로 입력되도록 한다

/*--------------고객 스키마 ---------------*/
drop table if exists 고객;

create table 고객 (
    고객아이디  varchar(8)      NOT NULL  ,
    고객이름     varchar(20)    NOT NULL  ,
    나이           int ,
    등급           varchar(10) ,
    직업           varchar(20) , 
    적립금        int                DEFAULT 0 ,
    PRIMARY KEY(고객아이디)
);

-- 고객(고객아이디,고객이름,나이,등급,직업,적립금)
insert into 고객 values('apple','정소화',20,'gold','학생',1000);
insert into 고객 values('banana','김선우',25,'vip','간호사',2500);
insert into 고객 values('carrot','고명석',28,'gold','교사',4500);
insert into 고객 values('orange','김용축',22,'silver','학생',NULL);
insert into 고객 values('melon','성원용',35,'gold','회사원',5000);
insert into 고객 values('peach','오형준',NULL,'silver','의사',300);
insert into 고객 values('pear','채광주',31,'silver','회사원',500);

select * from 고객;
/*------------------------------------------------------*/

-- [Quiz 2]  (MySQL) 실습: (고객)

-- 1) 직업이 학생, 간호사, 교사인 고객의 이름, 직업, 등급을 검색
-- 2) 적립금이 300 이상인 고객 중에서 
-- 나이를 알 수 없는 고객아이디, 나이, 적립금을 검색하라
-- 3) 등급이 gold인 고객 중에서 고객아이디, 등급, 적립금을 검색하라.  
-- 단, 등급을 오름차순 정렬하고 등급이 같으면 적립금의 내림차순 정렬하라
-- 4) 등급별 적립급 평균을 검색하라, 
-- (단, 적립금 평균이 1000원 이상인 등급에 대해 검색)
-----------------------------------------
# [과제 02] (고객,제품,주문)

[실습] 실습환경 설정

[교재] (MySQL) 교재7장 실습환경 설정

-- "데이터베이스개론", 김연희, 한빛, ch07

--  고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)
--  제품(제품번호, 제품명, 재고량, 단가, 제조업체)
--  주문(주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자)

* 교재 7장 고객, 제품, 주문 테이블 생성

데이터베이스이름: handb

[실습환경] 
1. C 드라이브에 DBDATA 폴더 생성
2. han-mysql.sql 을 복사
3. cmd 에서 mysql 접속
C:\>mysql -uroot -p

4. mysql 에서 다음 명령을 실행
mysql>source c:/dbdata/han-mysql.sql;

-----------------------------------------
[과제 02] ch07 SELECT (01)

/* ---------------------------------------------------- */
CREATE DATABASE `handb` 
  default character set utf8mb4;

use handb;
/* ---------------------------------------------------- */
-- [과제2]
/* ---------------------------------------------------- */

SELECT
FROM
WHERE  ;

-- 고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)
-- 제품(제품번호, 제품명, 재고량, 단가, 제조업체)
-- 주문(주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자)

-- [실습 1] 다음에 대하여 SQL문법과 실행결과를 작성하라 
-- 예제7-9) 고객 테이블에서 고객아이디, 고객이름, 등급 속성을 검색한다
SELECT    
FROM     

-- 예제7-9 고객 테이블에서 고객아이디, 고객이름, 등급 속성을 검색한다

SELECT
FROM 

-- 예제7-10 고객 테이블에 존재하는 모든 속성을 검색한다
-- (속성명으로 검색)

SELECT
FROM 

-- 예제7-11 고객 테이블에 존재하는 모든 속성을 검색한다
-- (* 로 검색)

SELECT
FROM 

-- 예제7-12 제품 테이블에서 제조업체를 검색한다

SELECT
FROM 

-- 예제7-13) 제품 테이블에서 제조업체를 검색하되, ALL 키워드를 사용한다
SELECT       ALL 제조업체
FROM        제품;

-- 예제7-14) 제품 테이블에서 제조업체 속성을 중복 없이 검색한다
(중복 제거)
SELECT      
FROM               ;

-- 예제7-15 제품 테이블에서 제품명과 단가를 검색하되, 
-- 단가를 가격이라는 새 이름으로 출력한다

SELECT     
FROM               ;

-- 예제7-16 제품 테이블에서 제품명과 단가 속성을 검색하되, 
-- 단가에 500원을 더해 조정단가라는 새 이름으로 출력한다


-- 예제7-17) 제품 테이블에서 한빛제과가 제조한 제품의 제품명, 재고량, 단가를 검색한다
SELECT
FROM
WHERE  ;

-- 예제7-18) 주문 테이블에서 apple 고객이 15개 이상 주문한 주문제품, 수량, 주문일자를 검색한다
SELECT
FROM
WHERE  ;

-- 예제7-19) 주문 테이블에서 apple 고객이 주문했거나 15개 이상 주문된 제품의 주문제품, 수량, 주문일자, 주문고객을 검색한다
SELECT
FROM
WHERE  ;

-- 예제7-20) 제품 테이블에서 단가가 2000원 이상이면서 3000원 이하인 제품의 제품명, 단가, 제조업체를 검색한다
SELECT
FROM
WHERE  ;

-- 예제7-21) 고객 테이블에서 성이 김씨인 고객의 고객이름, 나이, 등급, 적립금을 검색한다

-- 예제7-22) 고객 테이블에서 고객아이디가 5자인 
고객의 고객아이디, 고객이름, 등급을 검색한다

SELECT     고객아이디, 고객이름, 등급
FROM      고객
WHERE    고객아이디 LIKE '____';

SELECT     고객아이디, 고객이름, 등급
FROM      고객
WHERE    char_length(고객아이디) = 5 ;


-- 예제7-23) 고객 테이블에서 나이가 아직 입력되지 않은 고객의 고객이름을 검색한다
-- 예제7-24) 고객 테이블에서 나이가 이미 입력된 고객의 고객이름을 검색한다
-- 예제7-25) 고객 테이블에서 고객이름, 등급, 나이를 검색하되, 나이를 기준으로 내림차순 정렬한다
-- 예제7-26) 주문 테이블에서 수량이 10개 이상인 주문의 주문고객, 주문제품, 수량, 주문일자를 검색한다.  단, 주문제품을 기준으로 오름차순 정렬하고, 동일 제품은 수량을 기준으로 내림차순 정렬한다

-- [실습 2] 집계함수, group by

-- 예제7-27) 제품 테이블에서 모든 제품의 단가 평균을 검색한다
-- 예제7-28) 한빛제과에서 제조한 제품의 재고량 합계를 제품 테이블에서 검색한다

-- 예제7-29) 고객 테이블에 고객이 몇 명 등록되어 있는지 검색한다

--1) 고객아이디 속성을 이용해 계산하는 경우
--2) 나이 속성을 이용해 계산하는 경우(널 값 제외)
--3)  * 을 이용해 계산하는 경우

-- 예제7-30) 제품 테이블에서 제조업체의 수를 검색한다

-- 예제7-31) 주문 테이블에서 주문제품별 수량의 합계를 검색한다
-- 예제7-32) 제품 테이블에서 제조업체별로 제조한 제품의 개수와 제품 중 가장 비싼 단가를 검색하되, 제품의 개수는 제품수라는 이름으로 출력하고 가장 비싼 단가는 최고가라는 이름으로 출력한다
-- 예제7-33) 제품 테이블에서 제품을 3개 이상 제조한 제조업체별로 제품의 개수와 제품 중 가장 비싼 단가를 검색한다
-- 예제7-34) 고객 테이블에서 적립금 평균이 1000원 이상인 등급에 대해 등급별 고객 수와 적립금 평균을 검색한다
-- 예제7-35) 주문 테이블에서 각 주문고객이 주문한 제품의 총주문수량을 주문제품별로 검색한다

/* ---------------------------------------------- */
-- "데이터베이스개론", 김연희, 한빛, ch07
-- (MySQL)
-- handb 데이터베이스 존재할 경우, 데이터베이스 삭제
drop database if exists handb;

-- 교재 7장 스키마 생성
CREATE DATABASE `handb` 
  default character set utf8mb4;

-- 사용할 데이터베이스 선택
use handb;

DROP TABLE if exists 주문;
DROP TABLE if exists 고객;
DROP TABLE if exists 제품;

-- 고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)
-- 제품(제품번호, 제품명, 재고량, 단가, 제조업체)
-- 주문(주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자)

CREATE TABLE 고객 (
	고객아이디  VARCHAR(20)	NOT NULL,
	고객이름    VARCHAR(10),
	나이         INT,
	등급         VARCHAR(10)	NOT NULL,
	직업         VARCHAR(20),
	적립금      INT	            DEFAULT 0,
	PRIMARY KEY(고객아이디)
);

CREATE TABLE 제품 (
	제품번호    CHAR(3)	NOT NULL,
	제품명       VARCHAR(20),
	재고량       INT,
	단가         INT,
	제조업체    VARCHAR(20),
	PRIMARY KEY(제품번호)
	-- CHECK (재고량 >= 0 AND 재고량 <= 10000)
);

CREATE TABLE 주문 (
	주문번호    CHAR(3)	NOT NULL,
	주문고객    VARCHAR(20),
	주문제품    CHAR(3),
	수량         INT,
	배송지      VARCHAR(30),
	주문일자    DATE,
	PRIMARY KEY(주문번호),
	FOREIGN KEY(주문고객) REFERENCES 고객(고객아이디),
	FOREIGN KEY(주문제품) REFERENCES 제품(제품번호)
);

--  고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)
INSERT INTO 고객 VALUES ('apple', '정소화', 20, 'gold', '학생', 1000);
INSERT INTO 고객 VALUES ('banana', '김선우', 25, 'vip', '간호사', 2500);
INSERT INTO 고객 VALUES ('carrot', '고명석', 28, 'gold', '교사', 4500);
INSERT INTO 고객 VALUES ('orange', '김용욱', 22, 'silver', '학생', 0);
INSERT INTO 고객 VALUES ('melon', '성원용', 35, 'gold', '회사원', 5000);
INSERT INTO 고객 VALUES ('pear', '채광주', 31, 'silver', '회사원', 500);
INSERT INTO 고객 VALUES ('peach', '오형준', NULL, 'silver', '의사', 300);

--  제품(제품번호, 제품명, 재고량, 단가, 제조업체)
INSERT INTO 제품 VALUES ('p01', '그냥만두', 5000, 4500, '대한식품');
INSERT INTO 제품 VALUES ('p02', '매운쫄면', 2500, 5500, '민국푸드');
INSERT INTO 제품 VALUES ('p03', '쿵떡파이', 3600, 2600, '한빛제과');
INSERT INTO 제품 VALUES ('p04', '맛난초콜렛', 1250, 2500, '한빛제과');
INSERT INTO 제품 VALUES ('p05', '얼큰라면', 2200, 1200, '대한식품');
INSERT INTO 제품 VALUES ('p06', '통통우동', 1000, 1550, '민국푸드');
INSERT INTO 제품 VALUES ('p07', '달콤비스켓', 1650, 1500, '한빛제과');

--  주문(주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자)
INSERT INTO 주문 VALUES ('o01', 'apple', 'p03', 10, '서울시 마포구', '13/01/01');
INSERT INTO 주문 VALUES ('o02', 'melon', 'p01', 5, '인천시 계양구', '13/01/10');
INSERT INTO 주문 VALUES ('o03', 'banana', 'p06', 45, '경기도 부천시', '13/01/11');
INSERT INTO 주문 VALUES ('o04', 'carrot', 'p02', 8, '부산시 금정구', '13/02/01');
INSERT INTO 주문 VALUES ('o05', 'melon', 'p06', 36, '경기도 용인시', '13/02/20');
INSERT INTO 주문 VALUES ('o06', 'banana', 'p01', 19, '충청북도 보은군', '13/03/02');
INSERT INTO 주문 VALUES ('o07', 'apple', 'p03', 22, '서울시 영등포구', '13/03/15');
INSERT INTO 주문 VALUES ('o08', 'pear', 'p02', 50, '강원도 춘천시', '13/04/10');
INSERT INTO 주문 VALUES ('o09', 'banana', 'p04', 15, '전라남도 목포시', '13/04/11');
INSERT INTO 주문 VALUES ('o10', 'carrot', 'p03', 20, '경기도 안양시', '13/05/22');

--  고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)
--  제품(제품번호, 제품명, 재고량, 단가, 제조업체)
--  주문(주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자)

select * from 고객;
select * from 제품;
select * from 주문;

/* --------------------------------------------- */

===============

-----------------------------------------


-- 예제7-9 고객 테이블에서 고객아이디, 고객이름, 등급 속성을 검색한다

SELECT
FROM 

-- 예제7-10 고객 테이블에 존재하는 모든 속성을 검색한다
-- (속성명으로 검색)

SELECT
FROM 

-- 예제7-11 고객 테이블에 존재하는 모든 속성을 검색한다
-- (* 로 검색)

SELECT
FROM 

-- 예제7-12 제품 테이블에서 제조업체를 검색한다

SELECT
FROM 

-- 예제7-13 제품 테이블에서 제조업체를 검색하되, ALL 키워드를 사용한다

SELECT
FROM 

-- 예제7-14 제품 테이블에서 제조업체 속성을 중복 없이 검색한다

SELECT
FROM 

-- 예제7-15 제품 테이블에서 제품명과 단가를 검색하되, 단가를 가격이라는 새 이름으로 출력한다

SELECT
FROM 

-- 예제7-16 제품 테이블에서 제품명과 단가 속성을 검색하되, 
-- 단가에 500원을 더해 조정단가라는 새 이름으로 출력한다

SELECT
FROM 

/*------------------------------------------------------*/
-- 3.2.3 조건 검색

-- 예제7-17 제품 테이블에서 한빛제과가 제조한 제품의 제품명, 재고량, 단가를 검색한다

SELECT
FROM 
WHERE

-- 예제7-18 주문 테이블에서 apple 고객이 15개 이상 주문한
-- 주문제품, 수량, 주문일자를 검색한다

SELECT
FROM 
WHERE

-- 예제7-19 주문 테이블에서 apple 고객이 주문했거나 15개 이상 주문된 제품의
-- 주문제품, 수량, 주문일자, 주문고객을 검색한다

SELECT
FROM 
WHERE

-- 예제7-20 제품 테이블에서 단가가 2000원 이상이면서 3000원 이하인 
-- 제품의 제품명, 단가, 제조업체를 검색한다

SELECT
FROM 
WHERE

/*------------------------------------------------------*/
-- 3.2.4 LIKE를 이용한 검색

-- 예제7-21 고객 테이블에서 성이 김씨인 고객의
-- 고객이름, 나이, 등급, 적립금을 검색한다

SELECT
FROM 
WHERE

-- 예제7-22 고객 테이블에서 고객아이디가 5자인 고객의
-- 고객아이디, 고객이름, 등급을 검색한다


SELECT
FROM 
WHERE

/*------------------------------------------------------*/
-- 3.2.5 NULL을 이용한 검색

-- 예제7-23 고객 테이블에서 나이가 아직 입력되지 않은 고객의 고객이름을 검색한다

SELECT
FROM 
WHERE


-- 예제7-24 고객 테이블에서 나이가 이미 입력된 고객의 고객이름을 검색한다

SELECT
FROM 
WHERE


/*------------------------------------------------------*/
-- 3.2.6 정렬 검색

-- 예제7-25 고객 테이블에서 고객이름, 등급, 나이를 검색하되, 
-- 나이를 기준으로 내림차순 정렬한다



-- 예제7-26 주문 테이블에서 수량이 10개 이상인 주문의 주문고객, 주문제품, 수량, 
-- 주문일자를 검색한다
-- 단, 주문제품을 기준으로 오름차순 정렬하고, 동일 제품은 수량을 기준으로 내림차순 정렬한다



/*------------------------------------------------------*/
-- 3.2.7 집계 함수 검색

-- 예제7-27 제품 테이블에서 모든 제품의 단가 평균을 검색한다


-- 예제7-28 한빛제과에서 제조한 제품의 재고량 합계를 제품 테이블에서 검색한다


--예제7-29 고객 테이블에 고객이 몇 명 등록되어 있는지 검색한다

-- 1) 고객아이디 속성을 이용해 계산하는 경우

-- 2) 나이 속성을 이용해 계산하는 경우

-- 3) *을 이용해 계산하는 경우


-- 예제7-30 제품 테이블에서 제조업체의 수를 검색한다

/*------------------------------------------------------*/
-- 3.2.8 그룹별 검색

-- 예제7-31 주문 테이블에서 주문제품별 수량의 합계를 검색한다

-- 예제7-32 제품 테이블에서 제조업체별로 제조한 제품의 개수와 제품 중 
-- 가장 비싼 단가를 검색하되,
-- 제품의 개수는 제품수라는 이름으로 출력하고
-- 가장 비싼 단가는 최고가라는 이름으로 출력한다


-- 예제7-33 제품 테이블에서 제품을 3개 이상 제조한 제조업체별로 제품의 개수와,
-- 제품 중 가장 비싼 단가를 검색한다


-- 예제7-34 고객 테이블에서 적립금 평균이 1000원 이상인 등급에 대해
-- 등급별 고객 수와 적립금 평균을 검색한다


-- 예제7-35 주문 테이블에서 각 주문고객이 주문한 제품의 총주문수량을 
-- 주문제품별로 검색한다

/*------------------------------------------------------*/
-----------------------------------------
--------------------------------------------------