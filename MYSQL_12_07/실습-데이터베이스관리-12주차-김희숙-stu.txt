-- 데이터베이스관리(담당: 김희숙) 12주차 실습(ans)

==============================
----------------------------------------
-- SAFE_UPDATE 모드 해제
SET SQL_SAFE_UPDATES = 0;

-- 테이블 구조 확인
DESC 테이블명;
-----------------------------------------

/*------- 제약조건 확인(MySQL) ------ */
-- (MySQL) 제약조건 확인

-- 제약조건(부서, 사원)
SELECT * 
FROM  information_schema.table_constraints
WHERE table_name IN ('부서','사원');
/* -------------------------------------- */
==============================
12주차 (실습)
==============================
# (MySQL)
1단계: 데이터베이스 생성  studydb
    사용할 데이터베이스 선택
USE studydb;

2단계: 테이블 생성           (department, employee)
                                    
                                    [자유과제] 

3단계: 데이터 입력

4단계: 데이터 조회
select * from 성적;
-----------------------------------------
# [요약] 관계대수

3. 합집합(union), 교집합(intersect), 차집합(difference)
4. 카티션 프로덕트(product)

5. 조인 : 
내부조인(theta join, equi join, natural join)
외부조인(left outer join, right outer join, full outer join)
-----------------------------------------
[Quiz] 조인
-------------------------------------------------------------------
-- (복습)
[Quiz] 
-- department(deptno, deptname, floor)                    
-- employee(empno, empname, title, manager, salary, dno)

-- 16-1) 김창섭이 속한 부서번호와 부서의 모든 부서번호를 합집합으로 검색하라 (UNION)
-- 16-2) 김창섭이 속한 부서번호와 부서의 모든 부서번호를 합집합으로 검색하라 (UNION ALL)

-- 17) 사원의 이름과 이 사원이 속한 부서이름을 검색하라 (조인)

-- 18) 사원에 대해서 사원이름과 직속상사의 이름을 검색하라(Self-Join)
-- (문제풀이 안해도 됨) 

-- 19) 사원에 대해서 부서이름, 사원이름, 직급, 급여를 검색하라.
-- 부서이름에 대해서 오름차순, 부서이름이 같을 경우에는 salary에 대해서 내림차순으로 정렬하라

/* ======================================== */
--  [Quiz] 조인 실습용(join)
/* ======================================== */
/*  [Quiz] 조인 실습용: join */

-- (quiz-booksr_deptemp-mysql.sql) 

-- department(deptno, deptname, floor)                    
-- employee(empno, empname, title, manager, salary, dno)

drop table if exists employee;
drop table if exists department;

CREATE TABLE department (
     deptno              int          NOT NULL ,
     deptname          varchar(10) ,
     floor                 int ,
     PRIMARY KEY(deptno)
);

INSERT INTO department VALUES(1, '영업', 8);
INSERT INTO department VALUES(2, '기획', 10);
INSERT INTO department VALUES(3, '개발', 9);
INSERT INTO department VALUES(4, '총무', 7);

CREATE TABLE employee (
    empno	         int	              NOT NULL,
    empname     varchar(10)     UNIQUE,
    title	         varchar(10)     DEFAULT '사원',
    manager       int  ,
    salary            int	 ,
    dno              int	 ,
    PRIMARY KEY(empno),
    FOREIGN KEY(dno) REFERENCES department(deptno)
);

INSERT INTO employee VALUES(2106, '김창섭','대리',1003, 2500000, 2);
INSERT INTO employee VALUES(3426, '박영권','과장',4377, 3000000, 1);
INSERT INTO employee VALUES(3011, '이수민','부장',4377, 4000000, 3);
INSERT INTO employee VALUES(1003, '조민희','과장',4377, 3000000, 2);
INSERT INTO employee VALUES(3427, '최종철','사원',3011, 1500000, 3);
INSERT INTO employee VALUES(1365, '김상원','사원',3426, 1500000, 1);
INSERT INTO employee(empno, empname, title, salary, dno) VALUES(4377, '이성래','이사', 5000000, 2);

select * from department;
select * from employee;
/* ======================================== */

-- [Quiz ] 다음 SQL 문법을 작성하시오
-- (문제, SQL답안, 실행결과): department, employee
-- (오른쪽 상단 첨부파일에 있는 스키마 복사)

-- department(deptno, deptname, floor)
-- employee(empno, empname, title, manager, salary, dno)     
-- 외래키 : dno  -> department(deptno)

-- 부서(부서번호, 부서명, 위치)
-- 사원(사번, 사원명, 직책, 관리자, 급여, 부서번호)

-- [실습] SELECT 예제
-- department(deptno, deptname, floor)
-- employee(empno, empname, title, manager, salary, dno)     

-- 부서(부서번호, 부서명, 위치)
-- 사원(사번, 사원명, 직책, 관리자, 급여, 부서번호)

-- 1) 부서의 모든 필드를 검색하라
-- 2) 부서의 부서번호와 부서이름을 검색하라 (deptno는 부서번호, deptname은 부서이름 으로 검색)
-- 3) 사원의 직급을 검색하라
-- 4) 사원의 직급을 한번씩만 검색하라 (중복제거) (DISTINCT)
-- 5) 2번 부서에 근무하는 사원들에 관한 모든 정보를 검색하라
-- 6) 이씨 성을 가진 사원들의 이름, 직급, 부서번호를 검색하라
-- 7) 직급이 과장이면서 1번 부서에서 근무하는 사원들의 이름과 급여를 검색하라
-- 8) 직급이 과장이면서 1번 부서에 속하지 않은 사원들의 이름과 급여를 검색하라
-- 9) 급여가 3000000원 이상이고, 4500000원 이하인 사원의 이름, 직급, 급여를 검색하라
-- 9-1) BEWTEEN … AND 사용
-- 9-2) 부등호 사용

-- 10) 1번 부서나 3번 부서에 소속된 사원들에 관한 모든 정보를 검색하라 (IN 사용)
-- 11) 직급이 과장인 사원들에 대하여 이름, 현재급여, 급여가 10% 인상됐을 때의 값을 검색하라
-- 12) 2번 부서에 근무하는 사원들의 급여, 직급, 이름을 검색하여 급여의 오름차순으로 정렬하라
-- 13) 사원들의 평균 급여와 최대급여를 검색하라
-- 14) 사원들이 속한 부서번호별로 그룹화하고 부서번호, 평균급여, 최대급여를 검색하라
-- 15) 사원들이 속한 부서번호별로 그룹화하고, 평균급여가 2500000원 이상인 
-- 부서에 대해서 부서번호, 평균급여, 최대급여를 검색하라

-- 16-1) 김창섭이 속한 부서번호와 부서의 모든 부서번호를 합집합으로 검색하라 (UNION)
-- 16-2) 김창섭이 속한 부서번호와 부서의 모든 부서번호를 합집합으로 검색하라 (UNION ALL)

-- 17) 사원의 이름과 이 사원이 속한 부서이름을 검색하라 (조인)

-- 18) 사원에 대해서 사원이름과 직속상사의 이름을 검색하라(Self-Join)
-- (문제풀이 안해도 됨) 

-- 19) 사원에 대해서 부서이름, 사원이름, 직급, 급여를 검색하라.
-- 부서이름에 대해서 오름차순, 부서이름이 같을 경우에는 salary에 대해서 내림차순으로 정렬하라

/* ======================================== */


-----------------------------------------
[Quiz 01] 관계대수(조인)
R1              S1
   A     B         A    C     D
   1     4         1    3     4
    2    5         2    2     6
                     3    1     9

/* ======================================== */
-- 관계대수 실습용(join)  (R1, S1)
/* ======================================== */
/* 관계대수 실습용: join */

CREATE TABLE R1 (
        A char(2),
        B char(2)
);

CREATE TABLE S1 (
        A char(2),
        C char(2),
        D char(2)
);

INSERT INTO R1 VALUES ('1','4');
INSERT INTO R1 VALUES ('2','5');

INSERT INTO S1 VALUES ('1','3','4');
INSERT INTO S1 VALUES ('2','2','6');
INSERT INTO S1 VALUES ('3','1','9');

select * from r1;
select * from s1;
/* ======================================== */
-----------------------------------------
[Quiz 01] 관계대수(조인)

-- 1. 카티션 프로덕트
SELECT
FROM
WHERE      ;

-- 2. 동등조인(equi join)
SELECT
FROM
WHERE      ;

-- 3. 자연조인(natural join)
SELECT
FROM
WHERE      ;

-- 4. 세타조인(theta join)
SEL:ECT
FROM
WHERE      ;

-----------------------------------------
-- (ans)
-- 1. 카티션 프로덕트
select *
from  R1, S1;

-- 2. 동등조인(equi join)
select *
from  R1, S1
where R1.A = S1.A;

-- 3. 자연조인(natural join)
select R1.A, B, C, D
from  R1, S1
where R1.A = S1.A;

-- 4. 세타조인(theta join)
select *
from  R1, S1
where R1.A >= C;
-------------------------------------------------------------------
[과제3] [실습2-3]

-- [Quiz 1-01] 외부조인
omember                   group_ex
   id    groupid                groupid   position
---------------------        ------------------------
   100    A                         A           서울
   101    B                         B            대구
   102    A                         C            광주
   102    F                          D           부산
                                       E            대전
/*--------------------------------------------------------*/
drop table if exists omember;
drop table if exists group_ex;

CREATE TABLE omember ( 
   id        CHAR(3)     NOT NULL ,
   groupid CHAR(1)
);

CREATE TABLE group_ex ( 
   groupid   CHAR(1)   NOT NULL ,
   position   VARCHAR(12)
);

INSERT INTO omember VALUES('100', 'A');
INSERT INTO omember VALUES('101', 'B');
INSERT INTO omember VALUES('102', 'A');
INSERT INTO omember VALUES('102', 'F');

INSERT INTO group_ex VALUES('A', '서울');
INSERT INTO group_ex VALUES('B', '대구');
INSERT INTO group_ex VALUES('C', '광주');
INSERT INTO group_ex VALUES('D', '부산');
INSERT INTO group_ex VALUES('E', '대전');

SELECT * FROM omember;
SELECT * FROM group_ex;
/*--------------------------------------------------------*/

-- [Quiz 1-02] 외부조인
다음을 관계대수로 나타내고 SQL과 실행결과를 작성하라

emp                         project  
   ename  pno                 pno      pname
   -------------                 -----------------
   홍길동  101                  101     작전중
   임꺽정  102                  102     특공대
   박찬호  101                  103     유레카
   박찬호  103                  104     다모여
   신동엽  NULL

-- 2-1) 사원 테이블과 프로젝트 테이블에 대해 왼쪽외부조인 질의를 수행하라
-- 2-2) 사원 테이블과 프로젝트 테이블에 대해 오른쪽외부조인 질의를 수행하라
-- 2-3) 사원 테이블과 프로젝트 테이블에 대해 완전외부조인 질의를 수행하라
--------------------------------------------------
-- 다음 실행결과를 노트에 작성하라

1) 내부조인(동등조인: equi join)
2) 내부조인(자연조인: Natural join)

3) 왼쪽외부조인
4) 오른쪽외부조인
5) 완전외부조인
--------------------------------------------------
-- 2-1) 왼쪽외부조인
select  *
from   emp LEFT OUTER JOIN project
on      emp.pno = project.pno;

-- 2-2) 오른쪽외부조인
select  *
from   emp RIGHT OUTER JOIN project
on      emp.pno = project.pno;

-- 2-3) 완전외부조인
select  *
from   emp FULL OUTER JOIN project
on      emp.pno = project.pno;

--------------------------------------------------
/*--------------------------------------------------------*/
/* 외부조인 실습용 (outerjoin02-mysql.sql) */

drop table if exists emp;
drop table if exists project;

CREATE TABLE emp ( 
    ename    VARCHAR(12)  NOT NULL ,
    pno       int
);

CREATE TABLE project ( 
   pno        int                  NOT NULL ,
   pname    VARCHAR(20)
);

INSERT INTO emp VALUES('홍길동', 101);
INSERT INTO emp VALUES('임꺽정', 102);
INSERT INTO emp VALUES('박찬호', 101);
INSERT INTO emp VALUES('박찬호', 103);
INSERT INTO emp VALUES('신동엽', NULL);

INSERT INTO project VALUES(101, '작전중');
INSERT INTO project VALUES(102, '특공대');
INSERT INTO project VALUES(103, '유레카');
INSERT INTO project VALUES(104, '다모여');

SELECT * FROM emp;
SELECT * FROM project;
/*--------------------------------------------------------*/
-- [Quiz 1-03] 관계대수



========================================
-- [과제 03]
/*======================================*/
drop table if exists R;
drop table if exists S;
drop table if exists V;

-- [실습 2-1]
/* 예제1 릴레이션 R, S */

/* 사원 테이블  R 생성 */
CREATE TABLE R ( 
   name   CHAR(9) NOT NULL ,
   dept    CHAR(2),
   gender CHAR(1)
);

/* 사원 테이블  S 생성 */
CREATE TABLE S ( 
   name   CHAR(9) NOT NULL ,
   dept    CHAR(2),
   gender CHAR(1)
);

INSERT INTO R (name, dept, gender) VALUES ( '홍길동', 'AA', 'M');
INSERT INTO R (name, dept, gender) VALUES ( '임꺽정', 'AA', 'M');

INSERT INTO S (name, dept, gender) VALUES ( '홍길동', 'AA', 'M');
INSERT INTO S (name, dept, gender) VALUES ( '박찬호', 'BB', 'M');
INSERT INTO S (name, dept, gender) VALUES ( '박세리', 'BB', 'F');

/* 예제2 릴레이션 V */
CREATE TABLE V ( 
   name      CHAR(9)       NOT NULL,
   category  VARCHAR(15), 
   c_name    VARCHAR(12),
   year        CHAR(4), 
   buy_date  CHAR(7) 
);

INSERT INTO V VALUES ('임꺽정','트럭','포토','1995','1997-05');
INSERT INTO V VALUES ('차범근','승용차','에쿠스','2001','2001-08');
INSERT INTO V VALUES ('홍길동','승용차','소나타','1998','1998-08');
INSERT INTO V VALUES ('박세리','승용차','싼타페','1999','1999-12');
/*--------------------------------------------------------*/

-- [실습 2-2] 
다음 관계대수에 대하여 각각 SQL문법과 그 실행결과를 작성하시오(문제와 SQL문법, 실행결과)


/* =========================== */
drop table R1, S1

CREATE TABLE R1 (
	A char(2),
	B char(2),
	C char(2)
);

CREATE TABLE S1 (
	A char(2),
	B char(2),
	C char(2)
);

INSERT INTO R1 VALUES ('a1','b1','c1');
INSERT INTO R1 VALUES ('a2','b3','c3');
INSERT INTO R1 VALUES ('a3','b4','c2');

INSERT INTO R1 VALUES ('a1','b1','c1');
INSERT INTO R1 VALUES ('a2','b3','c3');
INSERT INTO R1 VALUES ('a3','b3','c1');

select * from R1;
select * from S1;
/* =========================== */
/* 예제3 릴레이션 gmember, group_ex */

drop table if exists gmember;
drop table if exists group_ex;

CREATE TABLE gmember ( 
   id        CHAR(3)     NOT NULL ,
   groupid CHAR(1)
);

CREATE TABLE group_ex ( 
   groupid   CHAR(1)   NOT NULL ,
   position   VARCHAR(12)
);

INSERT INTO gmember VALUES('100', 'A');
INSERT INTO gmember VALUES('101', 'B');
INSERT INTO gmember VALUES('102', 'A');
INSERT INTO gmember VALUES('102', 'F');

INSERT INTO group_ex VALUES('A', '서울');
INSERT INTO group_ex VALUES('B', '대구');
INSERT INTO group_ex VALUES('C', '광주');
INSERT INTO group_ex VALUES('D', '부산');
INSERT INTO group_ex VALUES('E', '대전');

SELECT * FROM gmember;
SELECT * FROM group_ex;
/*--------------------------------------------------------*/
/* =========================== */
-- [실습 2-4] 
drop table R2;
drop table S2;

CREATE TABLE R2 (
	A char(2),
	B char(2),
	C char(2)
);

CREATE TABLE S2 (
	B char(2),
              D char(2)
);

INSERT INTO R2 VALUES ('a1','b1','c7');
INSERT INTO R2 VALUES ('a2','b1','c5');
INSERT INTO R2 VALUES ('a3','b4','c3');

INSERT INTO S2 VALUES ('b1','d1');
INSERT INTO S2 VALUES ('b5','d2');

select * from R2;
select * from S2;
/* =========================== */


/*--------------------------------------------------------*/
-- 4번
/* 예제4 릴레이션 R2, S2 */
/* [Quiz 4] */

drop table if exists R2;
drop table if exists S2;

CREATE TABLE R2 (
	A char(2),
	B char(2),
	C char(2)
);

INSERT INTO R2 VALUES ('a1','b1','c7');
INSERT INTO R2 VALUES ('a2','b1','c5');
INSERT INTO R2 VALUES ('a3','b4','c3');

CREATE TABLE S2 (
	B char(2),
	D char(2)
);

INSERT INTO S2 VALUES ('b1','d1');
INSERT INTO S2 VALUES ('b5','d2');
/*--------------------------------------------------------*/

==============================
-- (요약) 자체 릴레이션: 자신의 테이블을 참조하는 관계(self join)
==============================
-- [실습] 사원명과 직속상사명을 검색하라
-- emp(empno, empname, manager, dno)

select  E.empname "사원명", M.empname "직속상사명"
from   emp E, emp M
where  E.manager = M.empno;

/*------------------------------------------------------*/
DROP TABLE if exists emp;

create table emp (
    empno       char(4) PRIMARY KEY ,
    empname   varchar(12) ,
    manager    char(4) ,
    dno          char(1) ,
    FOREIGN KEY (manager) REFERENCES emp(empno)
);

insert into emp values('3011','이수민',NULL,'1');
insert into emp values('3426','박영권','3011','3');
insert into emp values('1003','조민희','3011','1');
insert into emp values('2106','김창섭','3426','2');
insert into emp values('3427','최종철','2106','3');

select * from emp;
/*------------------------------------------------------*/


--------------------------------------------------
-- [Quiz] 추천고객(자체 릴레이션)
-- 추천고객(고객아이디,고객이름,나이,등급,직업,적립금,추천고객)

-- 1) 테이블 생성 하시오
-- 2) 데이터입력 하시오
-- 3) 고객아이디, 고객이름, 추천고객이름 을 검색하라(내부조인)

--------------------------------------------------

/*------------------------------------------------------*/
/* (self-추천고객-mysql.sql) */

-- (MySQL )
drop database if exists testdb;

CREATE DATABASE `testdb` 
  default character set utf8mb4;

-- 사용할 데이터베이스 선택
USE testdb;

DROP TABLE if exists 추천고객;

-- 추천고객(고객아이디,고객이름,나이,등급,직업,적립금,추천고객)
create table 추천고객 (
    고객아이디   char(20)    NOT NULL PRIMARY KEY ,
    고객이름      varchar(20)  ,
    나이            int ,
    등급            varchar(10) ,
    직업            varchar(10) ,
    적립금         int ,
    추천고객      char(20) ,
    foreign key(추천고객) references 추천고객(고객아이디)
);

-- 추천고객(고객아이디,고객이름,나이,등급,직업,적립금,추천고객)
insert into 추천고객 values('orange','정지영',22,'silver','학생',0, NULL);
insert into 추천고객 values('apple','김현준',20,'gold','학생',1000, 'orange');
insert into 추천고객 values('banana','정소화',25,'vip','간호사',2500, 'orange');
insert into 추천고객 values('carrot','원유선',28,'gold','교사',4500, 'apple');

-- 데이터 조회
select * from 추천고객;
/*------------------------------------------------------*/


--------------------------------------------------
--마당서점 (madang_book-k-ora.sql)

-- [Quiz 5] 관계대수, SQL, 실행결과

-- 고객(고객번호, 이름, 주민번호, 주소, 핸드폰)
-- 도서(도서번호, 도서이름, 출판사, 가격)
-- 주문(고객번호, 도서번호, 판매가격, 주문일자)

-- 질의 2-1 마당서점에서 판매하는 도서 중 8,000 원 이하인 도서를 검색하시오
-- 질의 2-2 고객 릴레이션에서 이름, 주소, 핸드폰을 검색하시오
-- 질의 2-7 고객과 고객의 주문사항을 모두 보이시오 (동등조인)
-- 질의 2-8 고객과 고객의 주문사항을 모두 보이시오 (자연조인)
-- 질의 2-11 마당서점의 도서 중 가격이 8,000 원 이하인 도서이름과 출판사를 보이시오
-- 박지성의 주문번호, 이름, 판매가격을 검색하라

/*-----------------------------------------------*/
/* (madang_book-k-ora.sql) */

drop table if exists 주문;
drop table if exists 고객;
drop table if exists 도서;

-- 고객(고객번호, 이름, 주민번호, 주소, 핸드폰)
-- 도서(도서번호, 도서이름, 출판사, 가격)
-- 주문(고객번호, 도서번호, 판매가격, 주문일자)

CREATE TABLE  고객 (
   고객번호      INT PRIMARY KEY,  
   이름          VARCHAR(40),
   주민번호      CHAR(14),
   주소          VARCHAR(40),
   핸드폰        VARCHAR(30)
);

CREATE TABLE 도서 (
   도서번호      INT PRIMARY KEY,
   도서이름      VARCHAR(40),
   출판사        VARCHAR(40),
   가격          INT 
);

CREATE TABLE 주문 (
   고객번호 	INT  NOT NULL ,
   도서번호	INT  NOT NULL ,
   판매가격      INT,
   주문일자      DATE ,
   PRIMARY KEY(고객번호, 도서번호) ,
   FOREIGN KEY (고객번호) REFERENCES 고객(고객번호) ,
   FOREIGN KEY (도서번호) REFERENCES 도서(도서번호)
);

-- 고객(고객번호, 이름, 주민번호, 주소, 핸드폰)
INSERT INTO 고객 VALUES (1, '박지성', '810101-1111111','영국 맨체스타', '000-5000-0001');
INSERT INTO 고객 VALUES (2, '김연아', '900101-2222222','대한민국 서울', '000-6000-0001');  
INSERT INTO 고객 VALUES (3, '장미란', '830101-2333333','대한민국 강원도', '000-7000-0001');
INSERT INTO 고객 VALUES (4, '추신수', '820101-1444444','미국 클리블랜드', '000-8000-0001');

-- 도서(도서번호, 도서이름, 출판사, 가격)
INSERT INTO 도서 VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO 도서 VALUES(2, '축구 아는 여자', '나무수', 13000);
INSERT INTO 도서 VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO 도서 VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO 도서 VALUES(5, '피겨 교본', '굿스포츠', 8000);

-- 주문(고객번호, 도서번호, 판매가격, 주문일자)
INSERT INTO 주문 VALUES (1, 1, 7000, '2013-07-01'); 
INSERT INTO 주문 VALUES (1, 2, 13000, '2013-07-03');
INSERT INTO 주문 VALUES (2, 5, 8000, '2013-07-03'); 
INSERT INTO 주문 VALUES (3, 2, 13000, '2013-07-04'); 
INSERT INTO 주문 VALUES (4, 4, 35000, '2013-07-05');
INSERT INTO 주문 VALUES (1, 3, 22000, '2013-07-07');
INSERT INTO 주문 VALUES (4, 3, 22000, '2013-07-07');

select * from 고객;
select * from 도서;
select * from 주문;
/*-----------------------------------------------*/
--------------------------------------------------
======================================
