-- 데이터베이스관리(담당: 김희숙) 9주차 실습(stu)

-- (MySQL) safe mode 해제
SET SQL_SAFE_UPDATES = 0;

-- 테이블 구조 확인
DESC 테이블명;
==============================
/*------- 제약조건 확인(MySQL) ------ */
-- (MySQL) 제약조건 확인

-- 제약조건(부서, 사원)
SELECT * 
FROM  information_schema.table_constraints
WHERE table_name IN ('부서','사원');
/* -------------------------------------- */
==============================
9주차 (실습)
==============================
# (MySQL)
1단계: 데이터베이스 생성  studydb
    사용할 데이터베이스 선택
USE studydb;

2단계: 테이블 생성           (부서,사원), customer
3단계: 데이터 입력

4단계: 데이터 조회
select * from customer;
--------------------------------------------------
# (DDL, DML)
[실습] 필드 추가/데이터 추가

/* --- 부서 스키마 --------------------------- */
drop table 부서;

CREATE TABLE 부서 (
        부서번호  int             NOT NULL ,
        부서이름  varchar(10) ,
        PRIMARY KEY(부서번호)
);

insert into 부서 values(1,'인사부');
insert into 부서 values(2,'연구부');
insert into 부서 values(3,'홍보부');
/* --------------------------------------------- */

-- [Quiz 1-01]  스키마 수정(필드 추가) / 데이터 추가(레코드 입력)

-- SAFE_UPDATE 모드 해제
SET SQL_SAFE_UPDATES = 0;

-- [Quiz 1-01] (부서)
-- 부서(부서번호, 부서이름)

-- 1) 부서 테이블을 생성하라(CREATE)
-- 2) 부서 테이블에 데이터 입력하라(INSERT)
-- 부서번호는 4, 부서이름이 영업부

-- 3) 데이터 조회하라
select * from 부서;

-- 4) 부서 테이블에 필드 추가하라(ALTER)
-- 필드명 부서위치, 데이터 형식 varchar(10)

-- 5) 테이블 구조 조회하라(DESC)
desc 부서;

-- 6) 부서 테이블 데이터 수정하라(UPDATE)
-- 부서번호 1인 레코드의 부서위치 필드는 서울
-- 부서번호 2인 레코드의 부서위치 필드는 대전
-- 부서번호 3인 레코드의 부서위치 필드는 서울

-- 7) 데이터 조회하라
select * from 부서;

-- 8) 테이블 구조 조회하라(DESC)
desc 부서;

-- 9) 부서 테이블 삭제하라(drop)
--------------------------------------------------
-- [실습 2-01] 
/* --- 부서, 사원 스키마 ------------------------ */

-- 부서(부서번호 pk, 부서이름)
-- 사원(사원번호 pk, 사원이름, 소속부서 fk)

drop table if exists 사원;
drop table if exists 부서;

CREATE TABLE 부서 (
    부서번호  INT            NOT NULL ,
    부서이름  VARCHAR(10)   ,
    PRIMARY KEY (부서번호)
);

CREATE TABLE 사원 (
    사원번호  INT            NOT NULL ,
    사원이름  VARCHAR(10)   , 
    소속부서  INT  , 
    PRIMARY KEY (사원번호) ,   
    FOREIGN KEY (소속부서)
        REFERENCES 부서(부서번호)
);

-- 부서(부서번호 pk, 부서이름)
-- 사원(사원번호 pk, 사원이름, 소속부서 fk)
insert into 부서 values(1,'인사부');
insert into 부서 values(2,'연구부');
insert into 부서 values(3,'홍보부');

insert into 사원 values(1001,'홍길동',3);
insert into 사원 values(1002,'임꺽정',1);
insert into 사원 values(1003,'차명석',1);

select * from 부서;
select * from 사원;
/* --------------------------------------------- */

-- [실습 2-01] (테이블 2개) (부서, 사원)

-- 부서(부서번호 pk, 부서이름)
-- 사원(사원번호 pk, 사원이름, 소속부서 fk)

부서번호    부서이름
1              인사부
2              연구부
3              홍보부

사원번호    사원이름   소속부서
1001         홍길동       3
1002         임꺽정       1
1003         차명석       1

-- 홍보부를 삭제하라는 실행가능한가?

-- 부서번호 3인 홍보부를 삭제하라

--------------------------------------------------
-- [실습 2-02] (테이블 2개) (부서, 사원) (cascade)

-- 홍보부를 삭제하라는 실행가능한가?
-- 1) on delete no action 
-- 2) on delete cascade
-- 3) on delete set null

-- 부서번호 3인 홍보부를 삭제하라
DELETE
FROM    부서
WHERE  부서번호 = 3;

select * from 부서;
--------------------------------------------------
-- [실습 2-03]  (테이블 2개) (부서, 사원) (set null)

-- 홍보부를 삭제하라는 실행가능한가?
-- 1) on delete no action 
-- 2) on delete cascade
-- 3) on delete set null

-- 부서번호 3인 홍보부를 삭제하라
DELETE
FROM    부서
WHERE  부서번호 = 3;

select * from 부서;
--------------------------------------------------

==============================
[요약] SELECT 문법

-- 관계 연산자
초과  이상   같다   같지않다  이하  미만
>      >=    =       <> !=     <=     <

-- 논리 연산자: NOT,    AND,     OR
                                이고      이거나

-- 패턴 문자열: LIKE
%   0개 이상의 문자
_    1개 문자

LIKE ~와 같은, ~와 유사한

-- 정렬: ORDER BY 
     순서: 오름차순(ascending)    ASC
             내림차순(descending)  DESC
==============================
--------------------------------------------------
[실습] 데이터 조회

/* --- customer 스키마 ------------------------ */
CREATE  TABLE   customer (
      cno     char(4)         NOT  NULL  ,
      cname  varchar(10)   NOT  NULL  ,
      city     varchar(20)  ,
      point    int  ,
      CONSTRAINT  pk_customer_cno  PRIMARY  KEY(cno)
);
insert into customer values('c101','홍길동','서울',500);
insert into customer values('c102','임꺽정','인천',300);
insert into customer values('c103','박찬호','안양',800);
insert into customer values('c204','신동엽','과천',350);
insert into customer values('c205','정진우','고양',400);

/* 새 레코드를 추가하고 SELECT문 예제 실습하시오 */
insert into customer values('c307','정동우','서울', NULL);
/* --------------------------------------------- */

--------------------------------------------------
-- [실습 3] 데이터 조회 (customer)

SELECT
FROM     customer
WHERE               ;

--------------------------------------------------
[실습] (SELECT 기초, NULL, LIKE, Order by)

/* customer(cno, cname, city, point) */          
-- 고객(고객번호, 고객명, 거주지, 포인트)

-- 1-1) 테이블의 모든 열을 검색하라
-- 1-2) 테이블의 모든 열을 검색(필드명 사용)
-- 1-3) 고객의 고객명, 거주지를 검색하라(테이블의 특정 열을 검색)
-- 1-4) cname 은 성명, city는 거주지로 출력하라(화면에 표시되는 열 이름 변경하여 검색) 
-- 1-5) customer 테이블에서 거주지를 검색하라
-- 1-6) 거주지를 검색하는데 중복 행을 제거하여 한 번씩만 검색하라

-- 2-1) 고객번호가 c101 인 고객의 모든 정보를 검색하라
-- 2-2) 포인트가 400 이하인 고객의 모든 정보를 검색하라
-- 2-3) 거주지가 서울 이면서 포인트가 500 이상인 고객의 이름, 거주지, 포인트를 검색하라
-- 2-4) 거주지가 서울 이거나 포인트가 500 이상인 고객의 이름, 거주지, 포인트를 검색하라
-- 2-5) 포인트가 350 부터 500 사이인 고객이름, 거주지, 포인트를 검색하라
-- 부등호 사용
-- BETWEEN … AND 사용

-- 2-6) 거주지가 서울 이거나 안양인 고객번호, 이름, 거주지를 검색하라
-- 부등호 사용
-- IN 사용

-- 2-7) 거주지가 서울이 아니거나 안양이 아닌 고객번호, 이름, 거주지를 검색하라
-- 부등호 사용
-- NOT IN 사용

-- 3-1) 정씨 성을 가진 고객의 모든 열을 검색하라
-- 3-2) 이름에 '동' 자가 들어가는 고객의 모든 열을 검색하라
-- 3-3) 이름의 세번째 글자가 '우' 자가 들어가는 고객의 모든 열을 검색하라
-- 3-4) 성이 홍씨, 박씨, 정씨인 고객을 검색하라	
-- 성이 홍씨, 박씨, 정씨가 아닌 고객을 검색하라
-- 3-5) 포인트가 없는 고객의 번호, 이름, 포인트를 검색하라
-- 포인트가 있는 고객의 번호, 이름, 포인트를 검색하라

-- 4-1) 고객 테이블에서 이름을 오름차순 정렬하라	
-- 4-2) 거주지가 서울인 고객의 모든 데이터를 검색하는데, 이름의 오름차순 정렬하여 출력하라
-- 4-3) 거주지의 오름차순으로 정렬하고, 거주지가 같으면 포인트의 내림차순으로 정렬하라
-- 4-4) 포인트가 많은 순으로(내림차순) 먼저 정렬하고, 같은 포인트는 이름의 오름차순으로 정렬하고
-- 이름이 같으면 거주지의 오름차순으로 정렬하여 검색하라 

-- 4-5) 다음의 의미는?
SELECT      cno,  cname,  city,  point  
FROM        customer  
ORDER  BY  3;
