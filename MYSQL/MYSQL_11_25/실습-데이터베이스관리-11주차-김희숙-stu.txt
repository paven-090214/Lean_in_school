-- 데이터베이스관리(담당: 김희숙) 11주차 실습(stu)

==============================
----------------------------------------
-- SAFE_UPDATE 모드 해제
SET SQL_SAFE_UPDATES = 0;

-- 테이블 구조 확인
DESC 테이블명;
-----------------------------------------

/*------- 제약조건 확인(MySQL) ------ */
-- (MySQL) 제약조건 확인

-- 제약조건(부서, 사원)
SELECT * 
FROM  information_schema.table_constraints
WHERE table_name IN ('부서','사원');
/* -------------------------------------- */
==============================
11주차 (실습)
==============================
# (MySQL)
1단계: 데이터베이스 생성  studydb
    사용할 데이터베이스 선택
USE studydb;

2단계: 테이블 생성           (정회원, 준회원)
                                    
                                    [자유과제] department, employee

3단계: 데이터 입력

4단계: 데이터 조회
select * from 성적;
-----------------------------------------
# [요약] 관계대수

3. 합집합(union), 교집합(intersect), 차집합(difference)
4. 카티션 프로덕트(product)

5. 조인 : 
내부조인(theta join, equi join, natural join)
외부조인(left outer join, right outer join, full outer join)
-----------------------------------------
# [요약] 관계대수: 합집합, 교집합, 차집합

합집합(union), 
교집합(intersect), 
차집합(difference)

A = {1, 3, 6}
B = {2, 3, 7}

A ∪ B = { 1, 2, 3,  6, 7}
A ∩ B = { 3 }
A - B  = {1, 6}
-----------------------------------------
# [요약] 

카티션 프로덕트(product)

조인 : 두 개 이상의 테이블에서 원하는 결과를 검색
       (공통 필드)

1) 내부조인: 두 개의 릴레이션에서 
            일치하는 행을 검색
2) 외부조인: 두 개의 릴레이션에서 
            일치하지 않는 행도 검색

내부조인
(theta join, equi join, natural join)
          
외부조인
(left outer join, right outer join, full outer join)

-------------------------------------------------------------------
-- [실습 1-1] 정회원과 준회원을 UNION 연산자를 사용한 것과, 
-- UNION ALL 연산자를 사용한 것의 차이점을 확인하라

-- (오류) (MySQL 지원하지 않음)
SELECT * FROM 정회원
INTERSECT
SELECT * FROM 준회원;

-- (오류) (MySQL 지원하지 않음)
SELECT * FROM 정회원
MINUS
SELECT * FROM 준회원;
-----------------------------------------
-- [실습 1-1] 집합연산(합집합, 교집합, 차집합) : (member_set.sql)

-- 예제1) 정회원 과 준회원을 UNION 연산을 이용하여 검색하라

-- 예제2) 정회원 과 준회원을 INTERSECT 연산을 이용하여 검색하라
-- (MySQL 지원하지 않음)

-- 예제3) 정회원 과 준회원을 MINUS 연산을 이용하여 검색하라
-- (MS SQL은 EXCEPT 연산자 이용)

/* ======================================== */
-- 관계대수 실습용(집합) (member_set.sql)
/* ======================================== */
-- (member_set.sql)
-- 집합연산 (합집합, 교집합, 차집합)

drop table 정회원;
drop table 준회원;

CREATE TABLE 정회원 (
    번호          INT                 PRIMARY KEY ,
    이름          VARCHAR(12)   NOT NULL ,
    주민번호    CHAR(14)         NOT NULL ,
    휴대폰번호 CHAR(14)         NOT NULL,
    이메일       VARCHAR(30) ,
    등록일       CHAR(8)
);

CREATE TABLE 준회원 (
    번호          INT                 PRIMARY KEY ,
    이름          VARCHAR(12)   NOT NULL ,
    주민번호    CHAR(14)         NOT NULL ,
    휴대폰번호 CHAR(14)         NOT NULL,
    이메일       VARCHAR(30) ,
    등록일       CHAR(8)
);

-- 정회원 데이터 입력
INSERT INTO 정회원 ( 번호, 이름, 주민번호, 휴대폰번호, 이메일, 등록일)
VALUES ( 1, '홍길동', '820416-1234567', '(010) 123-1231','gdhong@gmail.com','20070302');

INSERT INTO 정회원 ( 번호, 이름, 주민번호, 휴대폰번호, 이메일, 등록일)
VALUES ( 2, '임꺽정', '830507-2345678', '(010) 122-1222','jung@hanmail.net','20050422');

-- 준회원 데이터 입력 */

-- 참고) 집합연산 실습을 위해서 홍길동 동일한 데이터를 입력한다. 
-- 즉, 홍길동 은 정회원, 준회원 이다

INSERT INTO 준회원 ( 번호, 이름, 주민번호, 휴대폰번호, 이메일, 등록일)
VALUES ( 1, '홍길동', '820416-1234567', '(010) 123-1231','gdhong@gmail.com','20070302');

INSERT INTO 준회원 ( 번호, 이름, 주민번호, 휴대폰번호, 이메일, 등록일)
VALUES ( 3, '박찬호', '850321-1456789', '(010) 133-1231','chpark@hanmail.net','20090512');

INSERT INTO 준회원 ( 번호, 이름, 주민번호, 휴대폰번호, 이메일, 등록일)
VALUES ( 4, '선동열', '761122-1889911', '(010) 144-1222','sun@naver.com','20080605');

SELECT * FROM 정회원;
SELECT * FROM 준회원;
/* ======================================== */


-------------------------------------------------------------------
[실습 2-1] 조인
-- 다음 실행결과를 노트에 작성하라

-- 1) 내부조인(동등조인)

-- 2) 내부조인(자연조인)
-> 1) 과 값이 같음
-- 3) 왼쪽외부조인
-- 4) 오른쪽외부조인
-- 5) 완전외부조인
-------------------------------------------------------------------

/* ======================================== */
-- 조인 실습용 (dmember, freshman)
/* ======================================== */
/* 조인 실습용  */
drop table if exists freshman;
drop table if exists dmember;

CREATE TABLE freshman ( 
 name    VARCHAR(12) NOT NULL ,
 address VARCHAR(9)
);

CREATE TABLE dmember ( 
 name      VARCHAR(12) NOT NULL ,
 dept_name VARCHAR(30)
);

INSERT INTO freshman VALUES('김광식', '서울');
INSERT INTO freshman VALUES('김현정', '대전');
INSERT INTO freshman VALUES('조영수', '대전');

INSERT INTO dmember VALUES('김광식', '컴퓨터공학과');
INSERT INTO dmember VALUES('김현정', '산업공학과');
INSERT INTO dmember VALUES('이진영', '전자공학과');

SELECT * FROM freshman;
SELECT * FROM dmember;
/* ======================================== */
-----------------------------------------
-- [실습] 조인

-- 1. 카티션 프로덕트

-- 2 동등조인
-- 방법1)
SELECT 
FROM   
WHERE  

-- 방법2)
SELECT 
FROM  
ON     

-- 3 자연조인
-- 방법1)
SELECT 
FROM   
WHERE  

-- 방법2)
SELECT 
FROM  
ON     

-- 4 왼쪽외부조인
-- 방법2)
SELECT 
FROM  
ON 

-- 5 오른쪽외부조인
-- 방법2)
SELECT 
FROM  
ON 

-- 6 완전외부조인

-----------------------------------------
-- [실습 2-2] 조인

-- 고객(고객아이디, 고객이름, 나이, 등급)
-- 주문(주문번호, 주문고객, 주문제품, 수량)

-- (자연조인)
-- 1-1) 고객아이디, 고객이름, 나이, 주문번호, 주문제품을 검색하라

-- (왼쪽 외부조인)
-- 1-2) 고객아이디, 고객이름, 나이, 주문번호, 주문제품을 검색하라
-- (단, 주문하지 않은 고객도 포함)

-- (ans)
-- (자연조인)
-- 1-1) 고객아이디, 고객이름, 나이, 
-- 주문번호, 주문제품을 검색하라
SELECT 고객.고객아이디, 고객이름, 나이, 주문번호, 주문제품
FROM  고객 , 주문
WHERE 고객.고객아이디 = 주문.주문고객;

-- (왼쪽 외부조인)
-- 1-2) 고객아이디, 고객이름, 나이, 
-- 주문번호, 주문제품을 검색하라
-- (단, 주문하지 않은 고객도 포함)
SELECT 고객.고객아이디, 고객이름, 나이, 주문번호, 주문제품
FROM  고객  LEFT OUTER JOIN 주문
ON      고객.고객아이디 = 주문.주문고객;

/* ======================================== */
-- 조인 실습용(join)
/* ======================================== */
/* 조인 실습용: join */
-- (MySQL)
-- handb 데이터베이스 존재할 경우, 데이터베이스 삭제
drop database if exists handb06;

-- 교재 6장 스키마 생성
CREATE DATABASE `handb06` 
  default character set utf8mb4;

-- 사용할 데이터베이스 선택
use handb06;

DROP TABLE if exists 주문;
DROP TABLE if exists 고객;

-- 고객(고객아이디, 고객이름, 나이, 등급)
-- 주문(주문번호, 주문고객, 주문제품, 수량)

CREATE TABLE 고객 (
	고객아이디  VARCHAR(20)	NOT NULL,
	고객이름    VARCHAR(10),
	나이         INT,
	등급         VARCHAR(10)	NOT NULL,
	PRIMARY KEY(고객아이디)
);

CREATE TABLE 주문 (
	주문번호    CHAR(4)	NOT NULL,
	주문고객    VARCHAR(20),
	주문제품    varCHAR(20),
	수량         INT,
	PRIMARY KEY(주문번호),
	FOREIGN KEY(주문고객) REFERENCES 고객(고객아이디)
);

--  고객(고객아이디, 고객이름, 나이, 등급)
INSERT INTO 고객 VALUES ('apple', '김현준', 20, 'gold');
INSERT INTO 고객 VALUES ('banana', '정소화', 25, 'vip');
INSERT INTO 고객 VALUES ('carrot', '원유선', 28, 'gold');
INSERT INTO 고객 VALUES ('orange', '정지영', 22, 'silver');

--  주문(주문번호, 주문고객, 주문제품, 수량)
INSERT INTO 주문 VALUES ('1001', 'apple', '진짜우동', 10);
INSERT INTO 주문 VALUES ('1002', 'carrot', '맛있는파이', 5);
INSERT INTO 주문 VALUES ('1003', 'banana', '그대로만두', 45);

-- 고객(고객아이디, 고객이름, 나이, 등급)
-- 주문(주문번호, 주문고객, 주문제품, 수량)

select * from 고객;
select * from 주문;
/* ======================================== */

[실습 1-2] 관계대수(조인)
/* ======================================== */
-- 관계대수 실습용(join)
/* ======================================== */
/* 관계대수 실습용: join */

CREATE TABLE R1 (
        A char(2),
        B char(2)
);

CREATE TABLE S1 (
        A char(2),
        C char(2),
        D char(2)
);

INSERT INTO R1 VALUES ('1','4');
INSERT INTO R1 VALUES ('2','5');

INSERT INTO S1 VALUES ('1','3','4');
INSERT INTO S1 VALUES ('2','2','6');
INSERT INTO S1 VALUES ('3','1','9');

select * from r1;
select * from s1;
/* ======================================== */
-----------------------------------------
[실습 1-2] 관계대수(조인)

-- 1. 카티션 프로덕트
SEL:ECT
FROM
WHERE      ;

-- 2. 동등조인(equi join)
SEL:ECT
FROM
WHERE      ;

-- 3. 자연조인(natural join)
SEL:ECT
FROM
WHERE      ;

-- 4. 세타조인(theta join)
SEL:ECT
FROM
WHERE      ;

-----------------------------------------
-- (ans)
-- 1. 카티션 프로덕트
select *
from  R1, S1;

-- 2. 동등조인(equi join)
select *
from  R1, S1
where R1.A = S1.A;

-- 3. 자연조인(natural join)
select R1.A, B, C, D
from  R1, S1
where R1.A = S1.A;

-- 4. 세타조인(theta join)
select *
from  R1, S1
where R1.A >= C;
-------------------------------------------------------------------

-------------------------------------------------------------------
-- (복습)
[Quiz] 집계함수, 그룹화

-- 1) 최고단가를 검색하라
-- 2) 사이즈 종류를 중복없이 검색하라
-- 3) 분류코드 개수를 중복없이 검색하라

-- 4) 분류코드별 상품 개수를 검색하라

/* ======================================== */
-- 집계함수/그룹화 실습용
/* ======================================== */
/* 집계함수/그룹화 실습용 */
-- (product-k-check-mysql.sql)

-- 색상분류(색상코드, 색상)
-- 상품(번호, 상품코드, 상품명, 분류코드, 색상코드, 사이즈, 단가) 

DROP TABLE 상품;
DROP TABLE 색상분류;

CREATE TABLE 색상분류 (
   색상코드   char(8)  NOT NULL  PRIMARY  KEY ,  
   색상  char(18) 
);

CREATE TABLE 상품 (
       상품코드       char(5)        NOT  NULL     PRIMARY  KEY,
       상품명          varchar(30)  NOT  NULL     UNIQUE,
       분류코드       varchar(10)  NOT  NULL     CHECK(분류코드 IN ('셔츠', '자켓', '바지', '점퍼')),
       색상코드       char(8)       NOT  NULL,
       사이즈          char(10)                           DEFAULT  'L',
       단가             int ,
       FOREIGN KEY (색상코드) REFERENCES 색상분류(색상코드)
);

-- 색상분류(색상코드, 색상)
insert into 색상분류 values('C01','검정');
insert into 색상분류 values('C02','흰색');
insert into 색상분류 values('C03','회색');
insert into 색상분류 values('C04','청색');
insert into 색상분류 values('C05','빨강');

-- 상품(번호, 상품코드, 상품명, 분류코드, 색상코드, 사이즈, 단가)
insert into 상품 values('p0001','청바지','바지','C04','XL', 11000);
insert into 상품 values('p0002','면바지','바지','C02','L', 24000);
insert into 상품 values('p0003','스포츠바지','바지','C01','L', 17000);
insert into 상품 values('p0004','드레스셔츠','셔츠','C04','L', 12000);

select * from 색상분류;
select * from 상품;
/* ======================================== */

### 수업중 문제풀이: <dy232DB1> (w11)

--  고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)
--  제품(제품번호, 제품명, 재고량, 단가, 제조업체)
--  주문(주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자)

-- 예제7-31) 주문 테이블에서 주문제품별 수량의 합계를 검색한다
-- 예제7-32) 제품 테이블에서 제조업체별로 제조한 제품의 개수와 제품 중 가장 비싼 단가를 검색하되, 제품의 개수는 제품수라는 이름으로 출력하고 가장 비싼 단가는 최고가라는 이름으로 출력한다
-- 예제7-33) 제품 테이블에서 제품을 3개 이상 제조한 제조업체별로 제품의 개수와 제품 중 가장 비싼 단가를 검색한다
-- 예제7-34) 고객 테이블에서 적립금 평균이 1000원 이상인 등급에 대해 등급별 고객 수와 적립금 평균을 검색한다
-- 예제7-35) 주문 테이블에서 각 주문고객이 주문한 제품의 총주문수량을 주문제품별로 검색한다


/* ======================================== */
-- (자유과제) [Quiz] 조인 실습용(join)
/* ======================================== */
/* (자유과제) [Quiz] 조인 실습용: join */

-- (quiz-booksr_deptemp-mysql.sql) 

-- department(deptno, deptname, floor)                    
-- employee(empno, empname, title, manager, salary, dno)

drop table if exists employee;
drop table if exists department;

CREATE TABLE department (
     deptno              int          NOT NULL ,
     deptname          varchar(10) ,
     floor                 int ,
     PRIMARY KEY(deptno)
);

INSERT INTO department VALUES(1, '영업', 8);
INSERT INTO department VALUES(2, '기획', 10);
INSERT INTO department VALUES(3, '개발', 9);
INSERT INTO department VALUES(4, '총무', 7);

CREATE TABLE employee (
    empno	         int	              NOT NULL,
    empname     varchar(10)     UNIQUE,
    title	         varchar(10)     DEFAULT '사원',
    manager       int  ,
    salary            int	 ,
    dno              int	 ,
    PRIMARY KEY(empno),
    FOREIGN KEY(dno) REFERENCES department(deptno)
);

INSERT INTO employee VALUES(2106, '김창섭','대리',1003, 2500000, 2);
INSERT INTO employee VALUES(3426, '박영권','과장',4377, 3000000, 1);
INSERT INTO employee VALUES(3011, '이수민','부장',4377, 4000000, 3);
INSERT INTO employee VALUES(1003, '조민희','과장',4377, 3000000, 2);
INSERT INTO employee VALUES(3427, '최종철','사원',3011, 1500000, 3);
INSERT INTO employee VALUES(1365, '김상원','사원',3426, 1500000, 1);
INSERT INTO employee(empno, empname, title, salary, dno) VALUES(4377, '이성래','이사', 5000000, 2);

select * from department;
select * from employee;
/* ======================================== */
 (자유과제) 

-- [Quiz ] 다음 SQL 문법을 작성하시오
-- (문제, SQL답안, 실행결과): department, employee
-- (오른쪽 상단 첨부파일에 있는 스키마 복사)

-- department(deptno, deptname, floor)
-- employee(empno, empname, title, manager, salary, dno)     
-- 외래키 : dno  -> department(deptno)

-- 부서(부서번호, 부서명, 위치)
-- 사원(사번, 사원명, 직책, 관리자, 급여, 부서번호)

-- [실습] SELECT 예제
-- department(deptno, deptname, floor)
-- employee(empno, empname, title, manager, salary, dno)     

-- 부서(부서번호, 부서명, 위치)
-- 사원(사번, 사원명, 직책, 관리자, 급여, 부서번호)

-- 1) 부서의 모든 필드를 검색하라
-- 2) 부서의 부서번호와 부서이름을 검색하라 (deptno는 부서번호, deptname은 부서이름 으로 검색)
-- 3) 사원의 직급을 검색하라
-- 4) 사원의 직급을 한번씩만 검색하라 (중복제거) (DISTINCT)
-- 5) 2번 부서에 근무하는 사원들에 관한 모든 정보를 검색하라
-- 6) 이씨 성을 가진 사원들의 이름, 직급, 부서번호를 검색하라
-- 7) 직급이 과장이면서 1번 부서에서 근무하는 사원들의 이름과 급여를 검색하라
-- 8) 직급이 과장이면서 1번 부서에 속하지 않은 사원들의 이름과 급여를 검색하라
-- 9) 급여가 3000000원 이상이고, 4500000원 이하인 사원의 이름, 직급, 급여를 검색하라
-- 9-1) BEWTEEN … AND 사용
-- 9-2) 부등호 사용

-- 10) 1번 부서나 3번 부서에 소속된 사원들에 관한 모든 정보를 검색하라 (IN 사용)
-- 11) 직급이 과장인 사원들에 대하여 이름, 현재급여, 급여가 10% 인상됐을 때의 값을 검색하라
-- 12) 2번 부서에 근무하는 사원들의 급여, 직급, 이름을 검색하여 급여의 오름차순으로 정렬하라
-- 13) 사원들의 평균 급여와 최대급여를 검색하라
-- 14) 사원들이 속한 부서번호별로 그룹화하고 부서번호, 평균급여, 최대급여를 검색하라
-- 15) 사원들이 속한 부서번호별로 그룹화하고, 평균급여가 2500000원 이상인 
-- 부서에 대해서 부서번호, 평균급여, 최대급여를 검색하라

-- 16-1) 김창섭이 속한 부서번호와 부서의 모든 부서번호를 합집합으로 검색하라 (UNION)
-- 16-2) 김창섭이 속한 부서번호와 부서의 모든 부서번호를 합집합으로 검색하라 (UNION ALL)

-- 17) 사원의 이름과 이 사원이 속한 부서이름을 검색하라 (조인)

-- 18) 사원에 대해서 사원이름과 직속상사의 이름을 검색하라(Self-Join)
-- (문제풀이 안해도 됨) 

-- 19) 사원에 대해서 부서이름, 사원이름, 직급, 급여를 검색하라.
-- 부서이름에 대해서 오름차순, 부서이름이 같을 경우에는 salary에 대해서 내림차순으로 정렬하라

/* ======================================== */


/* ---------------------------------------------------- */
CREATE DATABASE `handb` 
  default character set utf8mb4;

use handb;
/* ---------------------------------------------------- */
-- [교재 7장]
/* ---------------------------------------------------- */

-- 고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)
-- 제품(제품번호, 제품명, 재고량, 단가, 제조업체)
-- 주문(주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자)

-- [실습 1] 다음에 대하여 SQL문법과 실행결과를 작성하라 
-- 예제7-10) 고객 테이블에서 고객아이디, 고객이름, 등급 속성을 검색한다
-- 예제7-11) 고객 테이블에 존재하는 모든 속성을 검색한다
-- 예제7-13) 제품 테이블에서 제조업체를 검색한다
-- 예제7-14) 제품 테이블에서 제조업체를 검색하되, ALL 키워드를 사용한다
-- 예제7-15) 제품 테이블에서 제조업체 속성을 중복 없이 검색한다(중복 제거)
-- 예제7-16) 제품 테이블에서 제품명과 단가를 검색하되, 단가를 가격이라는 새 이름으로 출력한다
-- 예제7-17) 제품 테이블에서 제품명과 단가 속성을 검색하되, 단가에 500원을 더해 조정단가라는 새 이름으로 출력한다
-- 예제7-18) 제품 테이블에서 한빛제과가 제조한 제품의 제품명, 재고량, 단가를 검색한다
-- 예제7-19) 주문 테이블에서 apple 고객이 15개 이상 주문한 주문제품, 수량, 주문일자를 검색한다
-- 예제7-20) 주문 테이블에서 apple 고객이 주문했거나 15개 이상 주문된 제품의 주문제품, 수량, 주문일자, 주문고객을 검색한다
-- 예제7-21) 제품 테이블에서 단가가 2000원 이상이면서 3000원 이하인 제품의 제품명, 단가, 제조업체를 검색한다
-- 예제7-22) 고객 테이블에서 성이 김씨인 고객의 고객이름, 나이, 등급, 적립금을 검색한다
-- 예제7-23) 고객 테이블에서 고객아이디가 5자인 고객의 고객아이디, 고객이름, 등급을 검색한다
-- 예제7-24) 고객 테이블에서 나이가 아직 입력되지 않은 고객의 고객이름을 검색한다
-- 예제7-25) 고객 테이블에서 나이가 이미 입력된 고객의 고객이름을 검색한다
-- 예제7-26) 고객 테이블에서 고객이름, 등급, 나이를 검색하되, 나이를 기준으로 내림차순 정렬한다
-- 예제7-27) 주문 테이블에서 수량이 10개 이상인 주문의 주문고객, 주문제품, 수량, 주문일자를 검색한다.  단, 주문제품을 기준으로 오름차순 정렬하고, 동일 제품은 수량을 기준으로 내림차순 정렬한다

-- [실습 2] 집계함수, group by

-- 예제7-28) 제품 테이블에서 모든 제품의 단가 평균을 검색한다
-- 예제7-29) 한빛제과에서 제조한 제품의 재고량 합계를 제품 테이블에서 검색한다

-- 예제7-30) 고객 테이블에 고객이 몇 명 등록되어 있는지 검색한다

--1) 고객아이디 속성을 이용해 계산하는 경우
--2) 나이 속성을 이용해 계산하는 경우(널 값 제외)
--3)  * 을 이용해 계산하는 경우

-- 예제7-31) 제품 테이블에서 제조업체의 수를 검색한다

-- 예제7-32) 주문 테이블에서 주문제품별 수량의 합계를 검색한다
-- 예제7-33) 제품 테이블에서 제조업체별로 제조한 제품의 개수와 제품 중 가장 비싼 단가를 검색하되, 제품의 개수는 제품수라는 이름으로 출력하고 가장 비싼 단가는 최고가라는 이름으로 출력한다
-- 예제7-34) 제품 테이블에서 제품을 3개 이상 제조한 제조업체별로 제품의 개수와 제품 중 가장 비싼 단가를 검색한다
-- 예제7-35) 고객 테이블에서 적립금 평균이 1000원 이상인 등급에 대해 등급별 고객 수와 적립금 평균을 검색한다
-- 예제7-36) 주문 테이블에서 각 주문고객이 주문한 제품의 총주문수량을 주문제품별로 검색한다

-- [실습 3] 조인

-- 예제7-37) 판매 데이터베이스에서 banana 고객이 주문한 제품의 이름을 검색해보자
-- 방법1) SELECT … FROM … WHERE            
-- 방법2) SELECT … FROM … ON

-- 예제7-38) 판매 데이터베이스에서 나이가 30세 이상의 고객이 주문한 제품의 주문제품과 주문일자를 검색하라

-- 예제7-39) 판매 데이터베이스에서 고명석 고객이 주문한 제품의 제품명을 검색하라 

/* ---------------------------------------------- */
-- "데이터베이스개론", 김연희, 한빛, ch07
-- (MySQL)
-- handb 데이터베이스 존재할 경우, 데이터베이스 삭제
drop database if exists handb;

-- 교재 7장 스키마 생성
CREATE DATABASE `handb` 
  default character set utf8mb4;

-- 사용할 데이터베이스 선택
use handb;

DROP TABLE if exists 주문;
DROP TABLE if exists 고객;
DROP TABLE if exists 제품;

-- 고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)
-- 제품(제품번호, 제품명, 재고량, 단가, 제조업체)
-- 주문(주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자)

CREATE TABLE 고객 (
	고객아이디  VARCHAR(20)	NOT NULL,
	고객이름    VARCHAR(10),
	나이         INT,
	등급         VARCHAR(10)	NOT NULL,
	직업         VARCHAR(20),
	적립금      INT	            DEFAULT 0,
	PRIMARY KEY(고객아이디)
);

CREATE TABLE 제품 (
	제품번호    CHAR(3)	NOT NULL,
	제품명       VARCHAR(20),
	재고량       INT,
	단가         INT,
	제조업체    VARCHAR(20),
	PRIMARY KEY(제품번호)
	-- CHECK (재고량 >= 0 AND 재고량 <= 10000)
);

CREATE TABLE 주문 (
	주문번호    CHAR(3)	NOT NULL,
	주문고객    VARCHAR(20),
	주문제품    CHAR(3),
	수량         INT,
	배송지      VARCHAR(30),
	주문일자    DATE,
	PRIMARY KEY(주문번호),
	FOREIGN KEY(주문고객) REFERENCES 고객(고객아이디),
	FOREIGN KEY(주문제품) REFERENCES 제품(제품번호)
);

--  고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)
INSERT INTO 고객 VALUES ('apple', '정소화', 20, 'gold', '학생', 1000);
INSERT INTO 고객 VALUES ('banana', '김선우', 25, 'vip', '간호사', 2500);
INSERT INTO 고객 VALUES ('carrot', '고명석', 28, 'gold', '교사', 4500);
INSERT INTO 고객 VALUES ('orange', '김용욱', 22, 'silver', '학생', 0);
INSERT INTO 고객 VALUES ('melon', '성원용', 35, 'gold', '회사원', 5000);
INSERT INTO 고객 VALUES ('pear', '채광주', 31, 'silver', '회사원', 500);
INSERT INTO 고객 VALUES ('peach', '오형준', NULL, 'silver', '의사', 300);

--  제품(제품번호, 제품명, 재고량, 단가, 제조업체)
INSERT INTO 제품 VALUES ('p01', '그냥만두', 5000, 4500, '대한식품');
INSERT INTO 제품 VALUES ('p02', '매운쫄면', 2500, 5500, '민국푸드');
INSERT INTO 제품 VALUES ('p03', '쿵떡파이', 3600, 2600, '한빛제과');
INSERT INTO 제품 VALUES ('p04', '맛난초콜렛', 1250, 2500, '한빛제과');
INSERT INTO 제품 VALUES ('p05', '얼큰라면', 2200, 1200, '대한식품');
INSERT INTO 제품 VALUES ('p06', '통통우동', 1000, 1550, '민국푸드');
INSERT INTO 제품 VALUES ('p07', '달콤비스켓', 1650, 1500, '한빛제과');

--  주문(주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자)
INSERT INTO 주문 VALUES ('o01', 'apple', 'p03', 10, '서울시 마포구', '13/01/01');
INSERT INTO 주문 VALUES ('o02', 'melon', 'p01', 5, '인천시 계양구', '13/01/10');
INSERT INTO 주문 VALUES ('o03', 'banana', 'p06', 45, '경기도 부천시', '13/01/11');
INSERT INTO 주문 VALUES ('o04', 'carrot', 'p02', 8, '부산시 금정구', '13/02/01');
INSERT INTO 주문 VALUES ('o05', 'melon', 'p06', 36, '경기도 용인시', '13/02/20');
INSERT INTO 주문 VALUES ('o06', 'banana', 'p01', 19, '충청북도 보은군', '13/03/02');
INSERT INTO 주문 VALUES ('o07', 'apple', 'p03', 22, '서울시 영등포구', '13/03/15');
INSERT INTO 주문 VALUES ('o08', 'pear', 'p02', 50, '강원도 춘천시', '13/04/10');
INSERT INTO 주문 VALUES ('o09', 'banana', 'p04', 15, '전라남도 목포시', '13/04/11');
INSERT INTO 주문 VALUES ('o10', 'carrot', 'p03', 20, '경기도 안양시', '13/05/22');

--  고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)
--  제품(제품번호, 제품명, 재고량, 단가, 제조업체)
--  주문(주문번호, 주문고객, 주문제품, 수량, 배송지, 주문일자)

select * from 고객;
select * from 제품;
select * from 주문;

/* --------------------------------------------- */

--------------------------------------------------